!function(){"use strict";angular.module("lazyGoogleMaps",[])}(),function(e){try{e=angular.module("lazyGoogleMaps")}catch(o){e=angular.module("lazyGoogleMaps",[])}e.run(["$templateCache",function(e){e.put("map/map.html",'<div class="lazy-google-maps"><input id="lazy-google-maps-search-{{$id}}" ng-hide="customSearchElementId" class="lazy-google-maps-search" type="text" placeholder="Search for a place..."> <button ng-if="freezeButton" ng-disabled="isLoading" ng-class="{ \'freezed\': freezed }" ng-click="toggleFreezed()" id="button-{{ $id }}" class="random-button-element"><span ng-if="!freezed">Freeze</span> <span ng-if="freezed">Unfreeze</span></button><div id="lazy-google-maps-canvas-{{$id}}" class="lazy-google-maps-canvas"></div></div>')}])}(),function(){"use strict";function e(e,o,t,n){function a(a){function l(){v(),L.setOptions({disableDoubleClickZoom:!1,draggable:!1,scrollwheel:!1})}function i(){u(),L.setOptions({disableDoubleClickZoom:!0,draggable:!0,scrollwheel:!0})}function s(){var t=o.defer(),r=["sensor=false","callback=mapLoaded","libraries=places"],l="https://maps.googleapis.com/maps/api/js?"+r.join("&"),i=document.createElement("script");return i.type="text/javascript",i.src=l,n.isLoading?(a.$on("lazyGoogleMaps:loaded",c),t.reject(),t.promise):(document.body.appendChild(i),n.isLoading=!0,e.mapLoaded=function(){t.resolve()},t.promise)}function c(){var e,o;return z=google.maps,e={zoom:8,center:new google.maps.LatLng(-33.868001,151.195248),panControlOptions:{position:z.ControlPosition.LEFT_CENTER},zoomControlOptions:{position:z.ControlPosition.LEFT_CENTER},streetViewControlOptions:{position:z.ControlPosition.LEFT_CENTER}},L=new z.Map(document.getElementById("lazy-google-maps-canvas-"+a.$id),e),w=new z.Marker({map:L}),C=new google.maps.InfoWindow,p(),u(),a.isLoading=!1,a.freezed&&l(),a.markers?h():void(o=a.$watchGroup(["lat","lng"],function(e){var t;return e[0]&&e[0]?(g(),o()):void(t=a.$watchGroup(["city","country","place"],function(e){return e[0]||e[1]||e[2]?(o(),d(),t()):void 0}))}))}function g(){var e=a.lat+","+a.lng;n.reverseGeocode(e).then(function(e){e&&m(e)})}function d(){var e=(a.city||"")+" "+(a.country||"")+" "+(a.place||"");n.geocode(e).then(function(e){e&&m(e)})}function p(){function e(){return document.getElementById(a.customSearchElementId?a.customSearchElementId:"lazy-google-maps-search-"+a.$id)}var o;E=e(),o=new google.maps.places.SearchBox(E),a.customSearchElementId||L.controls[z.ControlPosition.TOP_LEFT].push(E),z.event.addListener(o,"places_changed",function(){var e=o.getPlaces()[0];e&&m(e)})}function u(){z.event.addListener(L,"click",function(e){var o=e.latLng.A+","+e.latLng.F;n.reverseGeocode(o).then(function(e){e&&m(e)})})}function m(e){var o;C.close(),r.has(e,"geometry.viewport.Da")&&L.fitBounds(e.geometry.viewport),L.panTo(e.geometry.location),a.markers||(f(e),a.place=e.formatted_address,a.lat=e.geometry.location.A||e.geometry.location.lat,a.lng=e.geometry.location.F||e.geometry.location.lng,E.value=a.place,y(e),o="<div><strong>"+a.city+"</strong><br>"+a.place+"</div>",C.setContent(o),C.open(L,w))}function f(e){var o=e.geometry.location;w.setPosition(o),w.setVisible(!0)}function y(e){var o=r.filter(e.address_components,{types:["country"]}),t=r.filter(e.address_components,{types:["locality"]});a.country=o[0]?o[0].long_name:a.place,a.city=t[0]?t[0].long_name:a.country}function v(){z.event.clearListeners(L,"click")}function h(){var e=new google.maps.LatLngBounds,o="http://chart.apis.google.com/chart?cht=mm&chs=24x32&chco=FFFFFF,008CFF,000000&ext=.png",t=new google.maps.MarkerImage(o,new google.maps.Size(24,32)),n=r.map(a.markers,function(o){var n=new google.maps.LatLng(o.lat,o.lng),a=new google.maps.Marker({position:n,icon:t,title:"Click to zoom"});return z.event.addListener(a,"click",function(){L.setZoom(17),L.setCenter(a.getPosition()),console.log(a)}),e.extend(n),a}),l={gridSize:90,maxZoom:15,styles:[{url:o,height:35,width:35,anchor:[16,0],textColor:"#ff00ff",textSize:10}]};b=new MarkerClusterer(L,n,l),L.fitBounds(e),b.redraw()}var z,L,w,C,E,b;return a.isLoading=!0,a.toggleFreezed=function(){return a.freezed=!a.freezed,a.freezed?l():void i()},z?c():void s().then(function(){t.$broadcast("lazyGoogleMaps:loaded"),c()})}var r=e._,l={restrict:"E",scope:{lat:"=?",lng:"=?",country:"=?",city:"=?",place:"=?",customSearchElementId:"=?",freezeButton:"=?",freezed:"=?",isLoading:"@",markers:"=?"},replace:!0,templateUrl:"map/map.html",link:a};return l}angular.module("lazyGoogleMaps").directive("lazyGoogleMaps",e),e.$inject=["$window","$q","$rootScope","lazyGoogleMapsUtils"]}(),function(){"use strict";function e(e){function o(o){var t="https://maps.googleapis.com/maps/api/geocode/json?latlng=";return e.get(t+o).then(function(e){return e.data.results[0]})}function t(o){var t="https://maps.googleapis.com/maps/api/geocode/json?address=";return e.get(t+o).then(function(e){return e.data.results[0]})}var n={isLoading:!1,reverseGeocode:o,geocode:t};return n}angular.module("lazyGoogleMaps").factory("lazyGoogleMapsUtils",e),e.$inject=["$http"]}();
//# sourceMappingURL=data:application/json;base64,