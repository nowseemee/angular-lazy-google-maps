!function(){"use strict";angular.module("lazyGoogleMaps",[])}(),function(e){try{e=angular.module("lazyGoogleMaps")}catch(o){e=angular.module("lazyGoogleMaps",[])}e.run(["$templateCache",function(e){e.put("map/map.html",'<div class="lazy-google-maps"><input id="lazy-google-maps-search-{{$id}}" class="lazy-google-maps-search" type="text" placeholder="Search for a place..."><div id="lazy-google-maps-canvas-{{$id}}" class="lazy-google-maps-canvas"></div></div>')}])}(),function(){"use strict";function e(e,o,t,a){function n(n){function c(){var t=o.defer(),l=["sensor=false","callback=mapLoaded","libraries=places"],c="https://maps.googleapis.com/maps/api/js?"+l.join("&"),i=document.createElement("script");return i.type="text/javascript",i.src=c,a.isLoading?(n.$on("lazyGoogleMaps:loaded",r),t.reject(),t.promise):(document.body.appendChild(i),a.isLoading=!0,e.mapLoaded=function(){t.resolve()},t.promise)}function r(){var e,o;y=google.maps,e={zoom:8,center:new google.maps.LatLng(-33.868001,151.195248)},f=new y.Map(document.getElementById("lazy-google-maps-canvas-"+n.$id),e),v=new y.Marker({map:f}),h=new google.maps.InfoWindow,p(),g(),o=n.$watchGroup(["lat","lng"],function(e){var t;return e[0]&&e[0]?(i(),o()):void(t=n.$watchGroup(["city","country","place"],function(e){return e[0]||e[1]||e[2]?(o(),s(),t()):void 0}))})}function i(){var e=n.lat+","+n.lng;a.reverseGeocode(e).then(function(e){e&&u(e)})}function s(){var e=(n.city||"")+" "+(n.country||"")+" "+(n.place||"");a.geocode(e).then(function(e){e&&u(e)})}function p(){var e;z=document.getElementById("lazy-google-maps-search-"+n.$id),e=new google.maps.places.SearchBox(z),f.controls[y.ControlPosition.TOP_LEFT].push(z),y.event.addListener(e,"places_changed",function(){var o=e.getPlaces()[0];o&&u(o)})}function g(){y.event.addListener(f,"click",function(e){var o=e.latLng.A+","+e.latLng.F;a.reverseGeocode(o).then(function(e){e&&u(e)})})}function u(e){var o,t=new y.LatLngBounds;d(e),h.close(),l.has(e,"geometry.viewport.Da")?f.fitBounds(e.geometry.viewport):l.has(e,"geometry.location.A")&&(t.extend(e.geometry.location),f.fitBounds(t)),f.panTo(e.geometry.location),n.place=e.formatted_address,n.lat=e.geometry.location.A||e.geometry.location.lat,n.lng=e.geometry.location.F||e.geometry.location.lng,z.value=n.place,m(e),o="<div><strong>"+n.city+"</strong><br>"+n.place+"</div>",h.setContent(o),h.open(f,v)}function d(e){var o={url:e.icon,size:new y.Size(71,71),origin:new y.Point(0,0),anchor:new y.Point(17,34),scaledSize:new y.Size(35,35)},t=e.geometry.location;e.icon&&v.setIcon(o),v.setPosition(t),v.setVisible(!0)}function m(e){var o=l.filter(e.address_components,{types:["country"]}),t=l.filter(e.address_components,{types:["locality"]});n.country=o[0]?o[0].long_name:n.place,n.city=t[0]?t[0].long_name:n.country}var y,f,v,h,z;return y?r():void c().then(function(){t.$broadcast("lazyGoogleMaps:loaded"),r()})}var l=e._,c={restrict:"E",scope:{lat:"=?",lng:"=?",country:"=?",city:"=?",place:"=?"},replace:!0,templateUrl:"map/map.html",link:n};return c}angular.module("lazyGoogleMaps").directive("lazyGoogleMaps",e),e.$inject=["$window","$q","$rootScope","lazyGoogleMapsUtils"]}(),function(){"use strict";function e(e){function o(o){var t="https://maps.googleapis.com/maps/api/geocode/json?latlng=";return e.get(t+o).then(function(e){return e.data.results[0]})}function t(o){var t="https://maps.googleapis.com/maps/api/geocode/json?address=";return e.get(t+o).then(function(e){return e.data.results[0]})}var a={isLoading:!1,reverseGeocode:o,geocode:t};return a}angular.module("lazyGoogleMaps").factory("lazyGoogleMapsUtils",e),e.$inject=["$http"]}();
//# sourceMappingURL=data:application/json;base64,